<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Giocode labs]]></title>
  <link href="http://giocode.github.io/atom.xml" rel="self"/>
  <link href="http://giocode.github.io/"/>
  <updated>2015-08-16T14:55:38-07:00</updated>
  <id>http://giocode.github.io/</id>
  <author>
    <name><![CDATA[Rindra Ramamonjison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slick Database Programming in Scala]]></title>
    <link href="http://giocode.github.io/blog/2015/06/02/functional-database-programming-with-slick/"/>
    <updated>2015-06-02T19:38:49-07:00</updated>
    <id>http://giocode.github.io/blog/2015/06/02/functional-database-programming-with-slick</id>
    <content type="html"><![CDATA[<h2 id="awesome-are-scala-collections">Awesome are Scala Collections.</h2>
<p>Working with Scala collections is simply a joy and apparently effortless! Their interfaces are rich, consistent and nicely separated from implementation. Yet, we have many to choose from and each collection offers different characteristics in terms of performance, mutability and laziness. <img class="right" src="./images/slick.png" width="260" height="260" />Chances are you will find the right tool for the job. In addition, Scala collections work great with for-comprehensions. With Scala, not only do we have power but also we have a flexibility to express our computations: either in a Map-Reduce-Filter pattern or simply using a for expression. With Scala collections, we can always get rid of boilerplate and understand performance. </p>

<h3 id="so-is-slick">So is Slick!</h3>
<p>With the Slick library, database programming would also enjoy such simplicity. Slick is a cool library that enable to query and access relational databases in plain Scala. Slick enables us to treat database tables almost as if they were Scala collections. In addition, it also gives us full control over when a database access happens and which data is transferred. In addition to its functional relational mapping features, Slick queries are type safe expressions. In other words, the compiler can catch inconsistencies at compile-time. Furthermore, we can compose simple queries into more complex ones and we can do so before even running them against the database. Apart from that, Slick also simplifies database management tasks such as describing schema, creating data models, managing connections and building transactions.</p>

<p>In this tutorial, I will highlight Slick’s functional features and use the wine database of <em>Scala Vino Restaurant</em> as an illustrative example. </p>

<!-- more -->

<h2 id="getting-started-with-slick">Getting Started with Slick</h2>

<p>Programming a Slick database application consists of the following steps: </p>

<ol>
  <li>Configuring the database driver dependencies in SBT. </li>
  <li>Defining the database schema.</li>
  <li>Creating Slick queries</li>
  <li>Connecting to the database </li>
  <li>Run the queries or CRUD operations</li>
</ol>

<p>Let’s go through these steps in detail.</p>

<h3 id="configuring-build-dependencies">Configuring Build Dependencies</h3>

<p>We start by creating an SBT Scala project and configure the build settings in build.sbt:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">name</span> <span class="o">:=</span> <span class="s">&quot;wine-slick-example&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">version</span> <span class="o">:=</span> <span class="s">&quot;1.0&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">scalaVersion</span> <span class="o">:=</span> <span class="s">&quot;2.11.6&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.scala-lang&quot;</span> <span class="o">%</span> <span class="s">&quot;scala-compiler&quot;</span> <span class="o">%</span> <span class="n">scalaVersion</span><span class="o">.</span><span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">List</span><span class="o">(</span>
</span><span class="line">  <span class="s">&quot;com.typesafe.slick&quot;</span> <span class="o">%%</span> <span class="s">&quot;slick&quot;</span>           <span class="o">%</span> <span class="s">&quot;2.1.0&quot;</span><span class="o">,</span>
</span><span class="line">  <span class="s">&quot;com.h2database&quot;</span>      <span class="o">%</span> <span class="s">&quot;h2&quot;</span>              <span class="o">%</span> <span class="s">&quot;1.3.0&quot;</span><span class="o">,</span>
</span><span class="line">  <span class="s">&quot;ch.qos.logback&quot;</span>      <span class="o">%</span> <span class="s">&quot;logback-classic&quot;</span> <span class="o">%</span> <span class="s">&quot;1.1.2&quot;</span>
</span><span class="line"><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This file declares the library dependencies that a Slick project at least needs: the Slick library, the database driver library and a logging library. Here, we have chosen H2 database for simplicity. If you were to use MySQL or PostgreSQL, then the H2 dependency should be replaced by the corresponding JDBC driver. </p>

<p>Once the SBT configurations are set, we can build our Slick application and start by importing the H2 Library: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver</span>
</span><span class="line"><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver.simple._</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>These help Slick to understand the functions provided by the database-specific driver (e.g. H2 driver here). It is convenient to import everything from <code>H2Driver.simple</code> to make sure all required implicit conversions and extension methods are in place when Slick needs them.</p>

<h3 id="describing-the-database-schema">Describing the Database Schema</h3>

<p>After these simple configurations, we need define the database table and the type of each row in the table. In our example, we will only define one table of wines. Therefore, let’s create a case class <code>Wine</code> and define its properties: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Message type </span>
</span><span class="line"><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Wine</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">maker</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">year</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">					  <span class="n">country</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">price</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">id</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">){</span>
</span><span class="line">    <span class="k">override</span> <span class="k">def</span> <span class="n">toString</span> <span class="k">=</span> <span class="n">f</span><span class="s">&quot;$name $year ($country ~ $color)&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, let’s define the table <code>WineTable</code>:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Define a Table[Wine]</span>
</span><span class="line"><span class="k">final</span> <span class="k">class</span> <span class="nc">WineTable</span><span class="o">(</span><span class="n">tag</span><span class="k">:</span> <span class="kt">Tag</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Table</span><span class="o">[</span><span class="kt">Wine</span><span class="o">](</span><span class="n">tag</span><span class="o">,</span> <span class="s">&quot;wine&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">def</span> <span class="n">id</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">O</span><span class="o">.</span><span class="nc">PrimaryKey</span><span class="o">,</span> <span class="n">O</span><span class="o">.</span><span class="nc">AutoInc</span><span class="o">)</span>
</span><span class="line">    <span class="k">def</span> <span class="n">color</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;color&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="k">def</span> <span class="n">maker</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;maker&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="k">def</span> <span class="n">name</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="k">def</span> <span class="n">year</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="s">&quot;year&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="k">def</span> <span class="n">country</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;country&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="k">def</span> <span class="n">price</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">Double</span><span class="o">](</span><span class="s">&quot;price&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="o">*</span> <span class="k">=</span> <span class="o">(</span><span class="n">color</span><span class="o">,</span> <span class="n">maker</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">year</span><span class="o">,</span> <span class="n">country</span><span class="o">,</span> <span class="n">price</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span> <span class="o">&lt;&gt;</span> <span class="o">(</span><span class="nc">Wine</span><span class="o">.</span><span class="n">tupled</span><span class="o">,</span> <span class="nc">Wine</span><span class="o">.</span><span class="n">unapply</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the above code, we tell Slick three important things: </p>

<ul>
  <li>First, we tell Slick to define a table of wine by extending the abstract class <code>Table</code> with the type parameter <code>Wine</code>. By convention (since Slick 2.0), we also need to pass an extra tag argument with the table name. Note that the tag is however automatically passed by Slick and we do not need to specify it. </li>
  <li>Second, we specify the type, name and any constraint for each column in the table by defining a get method for each property of <code>Wine</code>. For example, we add the constraint for <code>id</code> to be an auto-incrementing primary key.</li>
  <li>Finally, the projecion operator <code>*</code> is defined to map each row in <code>WineTable</code> to the Scala class <code>Wine</code> using <code>Wine</code>’s default <code>tupled</code> and <code>unapply</code> method.</li>
</ul>

<h3 id="creating-queries">Creating queries</h3>

<p>In Slick, we can create queries even before connecting to the database. To start, let us create a <code>TableQuery</code> object <code>wines</code> that select all wines listed in our database. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Create a query to select the whole table </span>
</span><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">wines</span> <span class="k">=</span> <span class="nc">TableQuery</span><span class="o">[</span><span class="kt">WineTable</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is the starting point of every other query and it is a convention to define <code>wines</code> as a <code>lazy val</code>. At this time, we do not want to run the query yet. Now, we can define other queries using operators such as <code>filter</code>. For example, let’s define queries for red wines or Canadian wines: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Another query for red wines</span>
</span><span class="line"><span class="k">val</span> <span class="n">redWines</span> <span class="k">=</span> <span class="n">wines</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">color</span> <span class="o">===</span> <span class="s">&quot;Red&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Canadian wines</span>
</span><span class="line"><span class="k">val</span> <span class="n">canadianWines</span> <span class="k">=</span> <span class="n">wines</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">country</span> <span class="o">===</span> <span class="s">&quot;Canada&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Warning:</strong> 
Note the use of <code>===</code> instead of <code>==</code> for comparing two values for equality and <code>=!=</code> instead of <code>!=</code> for inequality. The other comparison operators are the same as in standard Scala code: <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>. If you accidentally use <code>==</code> instead of <code>===</code>, it will compile fine but your query results will be empty! </p>

<p>For each <code>Query</code> or <code>TableQuery</code>, there exist handy methods called <code>selectStatement</code> that prints the SQL code that will be run. For instance, we can quickly check into SBT console for the above queries: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">wines</span><span class="o">.</span><span class="n">selectStatement</span>
</span><span class="line"><span class="n">res</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">select</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;color&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;maker&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;year&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;country&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;price&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;id&quot;</span> <span class="n">from</span> <span class="s">&quot;wine&quot;</span> <span class="n">x2</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">canadianWines</span><span class="o">.</span><span class="n">selectStatement</span>
</span><span class="line"><span class="n">res</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">select</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;color&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;maker&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;year&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;country&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;price&quot;</span><span class="o">,</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;id&quot;</span> <span class="n">from</span> <span class="s">&quot;wine&quot;</span> <span class="n">x2</span> <span class="n">where</span> <span class="n">x2</span><span class="o">.</span><span class="s">&quot;country&quot;</span> <span class="k">=</span> <span class="-Symbol">&#39;Canada</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="connecting-to-the-database-and-running-the-queries">Connecting to the database and running the queries</h3>

<p>Since we do not have yet a database, let’s use the function <code>Database.forURL</code> and pass the database URL and the corresponding driver to create a <code>Database</code> object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Create a H2 in-memory database</span>
</span><span class="line"><span class="k">def</span> <span class="n">db</span> <span class="k">=</span> <span class="nc">Database</span><span class="o">.</span><span class="n">forURL</span><span class="o">(</span>
</span><span class="line">	<span class="n">url</span> <span class="k">=</span> <span class="s">&quot;jdbc:h2:mem:chat-database;DB_CLOSE_DELAY=-1&quot;</span><span class="o">,</span>
</span><span class="line">	<span class="n">driver</span> <span class="k">=</span> <span class="s">&quot;org.h2.Driver&quot;</span>
</span><span class="line"><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, we can connect to the database by opening a new session with the method <code>withSession</code>. Within the sesssion, we are going to: </p>

<ul>
  <li>Create our wine table using <code>wines.ddl.create</code>. </li>
  <li>Insert the list of wines we got before into the new table.</li>
  <li>Run the queries we previously created. </li>
</ul>

<p>All these must be done within the session. Moreover, the session argument must be set as implicit, otherwise we would have to specify it explicitly everytime we access and query the database. If we do not, we will run into an error that reads like this: <strong>error: could not find implicit value for parameter session: scala.slick.jdbc.JdbcBackend#SessionDef</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">db</span><span class="o">.</span><span class="n">withSession</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">session</span> <span class="k">=&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Create the wine table:</span>
</span><span class="line">    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Creating wine database&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="n">wines</span><span class="o">.</span><span class="n">ddl</span><span class="o">.</span><span class="n">create</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Create and insert our selection of data:</span>
</span><span class="line">    <span class="n">println</span><span class="o">(</span><span class="s">&quot;\nInserting wine data&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="n">wines</span> <span class="o">++=</span> <span class="n">wineData</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Run the test query and print the results:</span>
</span><span class="line">    <span class="n">println</span><span class="o">(</span><span class="s">&quot;\nPrinting all wines:&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="n">wines</span><span class="o">.</span><span class="n">run</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">println</span><span class="o">(</span><span class="s">&quot;\nThese are the wines from Canada:&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="n">canadianWines</span><span class="o">.</span><span class="n">run</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here what the results look like on standard output: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Printing all wines:
</span><span class="line">
</span><span class="line">Malbec Reserva 2009 (Argentina ~ Red)
</span><span class="line">Cote de Sambre et Meusu Pinot Gris 2013 (France ~ White)
</span><span class="line">Whispering Angel Rosé 2014 (France ~ Rosé)
</span><span class="line">Cabernet Sauvignon 2005 (United States ~ Red)
</span><span class="line">Mcgregor Shiraz 2009 (South Africa ~ Red)
</span><span class="line">Marlborough Sauvignon Blanc 2014 (New Zealand ~ White)
</span><span class="line">Rosé Sec VQA Cave Spring 2010 (Canada ~ Rosé)
</span><span class="line">Paragon Edna Valley Riesling 2012 (United States ~ White)
</span><span class="line">Conca del Riu Anoia Barcelona de Nit 2011 (Spain ~ White)
</span><span class="line">Amarone della Valpolicella Riserva Classico Sergio 2009 (Italy ~ Red)
</span><span class="line">The Prisoner 2013 (United States ~ Red)
</span><span class="line">Ice wine Vidal Inniskillin 2012 (Canada ~ Red)
</span><span class="line">Vin de glace Cabernet 2013 (Canada ~ Red)
</span><span class="line">Pinot Grigio Rosé Folonari 2014 (Italy ~ Rosé)
</span><span class="line">
</span><span class="line">These are the wines from Canada:
</span><span class="line">
</span><span class="line">Rosé Sec VQA Cave Spring 2010 (Canada ~ Rosé)
</span><span class="line">Ice wine Vidal Inniskillin 2012 (Canada ~ Red)
</span><span class="line">Vin de glace Cabernet 2013 (Canada ~ Red)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="more-crud-wines-with-slick">More CRUD wines with Slick</h2>

<h3 id="select-statement">Select statement</h3>

<p>In our previous queries, we got back a sequence of <code>Wine</code>. What if all we need is the list of French winemakers? For such kind of SELECT queries, we use the <code>map</code> operator and pass a function to select whatever we can access from the table. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// List of French winemakers </span>
</span><span class="line"><span class="k">val</span> <span class="n">frenchWinemakers</span> <span class="k">=</span> <span class="n">wines</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">country</span> <span class="o">===</span> <span class="s">&quot;France&quot;</span><span class="o">).</span>
</span><span class="line">                             <span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">maker</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Corresponding SQL statement</span>
</span><span class="line"><span class="c1">// select x2.&quot;maker&quot; from &quot;wine&quot; x2 where x2.&quot;country&quot; = &#39;France&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Run within session</span>
</span><span class="line"><span class="n">frenchWinemakers</span><span class="o">.</span><span class="n">run</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class="line"><span class="nc">Château</span> <span class="nc">Bon</span><span class="o">-</span><span class="nc">Baron</span>
</span><span class="line"><span class="nc">Chateau</span> <span class="n">d</span><span class="-Symbol">&#39;Esclans</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the above session, we assumed that we run the queries within <code>db.withSession{}</code>. If you want to run queries in the console, you can either use &#8220;db.withSession{anotherQuery.run}` everytime or create an implicit session as follows: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">implicit</span> <span class="k">val</span> <span class="n">session</span> <span class="k">=</span> <span class="n">db</span><span class="o">.</span><span class="n">createSession</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Note that this is only useful for experimentation purpose within Scala REPL. It is recommended not to create session manually. Instead, use <code>db.withSession</code> so that the resources are managed by Slick automatically.</p>

<h3 id="for-comprehensions-when-you-need-it">For Comprehensions When You Need it</h3>
<p>As I mentionned in the beginning, working with Slick tables are very similar to handling Scala collections. In addition to the combinators such as <code>map</code> and <code>filter</code>, we can also rely on _for comprehensions` to express queries. A valid alternative to getting the french makers is: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">frenchWinemakers</span> <span class="k">=</span>
</span><span class="line">	<span class="k">for</span> <span class="o">{</span>
</span><span class="line">		<span class="n">w</span> <span class="k">&lt;-</span> <span class="n">wines</span>
</span><span class="line">		<span class="k">if</span> <span class="n">w</span><span class="o">.</span><span class="n">country</span> <span class="o">===</span> <span class="s">&quot;France&quot;</span>
</span><span class="line">	<span class="o">}</span> <span class="k">yield</span> <span class="n">w</span><span class="o">.</span><span class="n">maker</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Which one should you use totally depends on your taste and needs. </p>

<h3 id="inserting-rows">Inserting rows</h3>

<p>Imagine our restaurant just received a nice selection of Australina wines. We can ask Slick to insert them into the database using <code>insert</code>: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">aussies</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class="line">    <span class="nc">Wine</span><span class="o">(</span><span class="s">&quot;Red&quot;</span><span class="o">,</span> <span class="s">&quot;Chandon&quot;</span><span class="o">,</span> <span class="s">&quot;Chandon Australia Heathcote Shiraz&quot;</span><span class="o">,</span> <span class="mi">2001</span><span class="o">,</span> <span class="s">&quot;Australia&quot;</span><span class="o">,</span> <span class="mf">45.0</span> <span class="o">),</span>
</span><span class="line">    <span class="nc">Wine</span><span class="o">(</span><span class="s">&quot;Rosé&quot;</span><span class="o">,</span> <span class="s">&quot;Jacob&#39;s Creek&quot;</span><span class="o">,</span> <span class="s">&quot;Sparkling Moscato Rosé&quot;</span><span class="o">,</span> <span class="mi">2014</span><span class="o">,</span> <span class="s">&quot;Australia&quot;</span><span class="o">,</span> <span class="mf">24.0</span><span class="o">),</span>
</span><span class="line">    <span class="nc">Wine</span><span class="o">(</span><span class="s">&quot;Red&quot;</span><span class="o">,</span> <span class="s">&quot;Chandon&quot;</span><span class="o">,</span> <span class="s">&quot;Vintage Collection Cuvée 500&quot;</span><span class="o">,</span> <span class="mi">2008</span><span class="o">,</span> <span class="s">&quot;Australia&quot;</span><span class="o">,</span> <span class="mf">59.95</span><span class="o">),</span>
</span><span class="line">    <span class="nc">Wine</span><span class="o">(</span><span class="s">&quot;Red&quot;</span><span class="o">,</span> <span class="s">&quot;Cranswick&quot;</span><span class="o">,</span> <span class="s">&quot;Riverina Cabernet Merlot&quot;</span><span class="o">,</span> <span class="mi">1999</span><span class="o">,</span> <span class="s">&quot;Australia&quot;</span><span class="o">,</span> <span class="mf">24.0</span><span class="o">)</span>
</span><span class="line"><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">db</span><span class="o">.</span><span class="n">withSession</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">session</span> <span class="k">=&gt;</span>
</span><span class="line">    <span class="c1">// Insert Australian selection into wines table</span>
</span><span class="line">    <span class="n">wines</span> <span class="o">++=</span> <span class="n">aussies</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Insert one wine </span>
</span><span class="line">    <span class="n">wines</span> <span class="o">+=</span> <span class="nc">Wine</span><span class="o">(</span><span class="s">&quot;Red&quot;</span><span class="o">,</span> <span class="s">&quot;Castle Glen Australia&quot;</span><span class="o">,</span> <span class="s">&quot;Montepulicano&quot;</span><span class="o">,</span> <span class="mi">2002</span><span class="o">,</span> <span class="s">&quot;Australia&quot;</span><span class="o">,</span> <span class="mi">39</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Showing all australian wines </span>
</span><span class="line">    <span class="n">wines</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">country</span> <span class="o">===</span> <span class="s">&quot;Australia&quot;</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Chandon Australia Heathcote Shiraz 2001 (Australia ~ Red)
</span><span class="line">Sparkling Moscato Rosé 2014 (Australia ~ Rosé)
</span><span class="line">Vintage Collection Cuvée 500 2008 (Australia ~ Red)
</span><span class="line">Riverina Cabernet Merlot 1999 (Australia ~ Red)
</span><span class="line">Montepulicano 2002 (Australia ~ Red)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="updating-rows">Updating rows</h3>

<p>Our restaurant is making a summer holiday promotion to Italian wine bottles. We are asked to update the price with 10% discount. Updating is done with a succession of <code>map</code> and <code>update</code> calls. Here, we first need to select the price to be updated and call <code>update</code> to update them. Unfortunately, it is not yet possible to update with scalar expression or transformations of the price value. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Discount all french wine bottles between $20 and $40 to $20</span>
</span><span class="line"><span class="k">val</span> <span class="n">frenchWines</span> <span class="k">=</span> <span class="n">wines</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">country</span> <span class="o">===</span> <span class="s">&quot;France&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">db</span><span class="o">.</span><span class="n">withSession</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">session</span> <span class="k">=&gt;</span>
</span><span class="line">
</span><span class="line">   	<span class="k">val</span> <span class="n">selectedPrices</span> <span class="k">=</span>
</span><span class="line">        <span class="k">for</span> <span class="o">{</span>
</span><span class="line">            <span class="n">w</span> <span class="k">&lt;-</span> <span class="n">wines</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">w</span><span class="o">.</span><span class="n">country</span> <span class="o">===</span> <span class="s">&quot;France&quot;</span><span class="o">)</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">w</span><span class="o">.</span><span class="n">price</span> <span class="o">&gt;=</span> <span class="mf">20.0</span> <span class="o">&amp;&amp;</span> <span class="n">w</span><span class="o">.</span><span class="n">price</span> <span class="o">&lt;=</span> <span class="mf">40.0</span><span class="o">)</span>
</span><span class="line">        <span class="o">}</span> <span class="k">yield</span> <span class="n">w</span><span class="o">.</span><span class="n">price</span>
</span><span class="line">    <span class="n">selectedPrices</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="mf">20.0</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here are the French wines before discount:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Cote de Sambre et Meusu Pinot Gris 2013 (France ~ White ~ 27.0)
</span><span class="line">Whispering Angel Rosé 2014 (France ~ Rosé ~ 35.0)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And after the discount: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Cote de Sambre et Meusu Pinot Gris 2013 (France ~ White ~ 20.0)
</span><span class="line">Whispering Angel Rosé 2014 (France ~ Rosé ~ 20.0)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="sorting-and-limiting-results">Sorting and limiting results</h3>

<p>Slick also provide mechanisms for ordering and limiting the results of queries. These are the standard collection methods <code>sortBy</code>, <code>take</code> and <code>drop</code>. For instance, let us query the 3 least expensive wines in our selection: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// 3 least expensive </span>
</span><span class="line"><span class="k">val</span> <span class="n">cheapWines</span> <span class="k">=</span> <span class="n">wines</span><span class="o">.</span><span class="n">sortBy</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">price</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Wines by country sorted by price</span>
</span><span class="line"><span class="k">val</span> <span class="n">winesByCountry</span> <span class="k">=</span> <span class="n">wines</span><span class="o">.</span><span class="n">sortBy</span><span class="o">(</span><span class="n">w</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">w</span><span class="o">.</span><span class="n">country</span><span class="o">,</span> <span class="n">w</span><span class="o">.</span><span class="n">price</span><span class="o">))</span>
</span><span class="line"><span class="n">db</span><span class="o">.</span><span class="n">withSession</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">session</span> <span class="k">=&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="n">println</span><span class="o">(</span><span class="s">&quot;\n&gt;&gt; Our cheapest wines:\n&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="n">cheapWines</span><span class="o">.</span><span class="n">run</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">println</span><span class="o">(</span><span class="s">&quot;\n&gt;&gt; Wines by Country:\n&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="n">winesByCountry</span><span class="o">.</span><span class="n">run</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here are the results: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">&gt;&gt; Our cheapest wines:
</span><span class="line">
</span><span class="line">Pinot Grigio Rosé Folonari 2014 (Italy ~ Rosé ~ 11.9)
</span><span class="line">Mcgregor Shiraz 2009 (South Africa ~ Red ~ 14.0)
</span><span class="line">Rosé Sec VQA Cave Spring 2010 (Canada ~ Rosé ~ 14.95)
</span><span class="line">
</span><span class="line">&gt;&gt; Wines by Country sorted by country and region:
</span><span class="line">
</span><span class="line">Malbec Reserva 2009 (Argentina ~ Red ~ 38.0)
</span><span class="line">Sparkling Moscato Rosé 2014 (Australia ~ Rosé ~ 24.0)
</span><span class="line">Riverina Cabernet Merlot 1999 (Australia ~ Red ~ 24.0)
</span><span class="line">Montepulicano 2002 (Australia ~ Red ~ 39.0)
</span><span class="line">Chandon Australia Heathcote Shiraz 2001 (Australia ~ Red ~ 45.0)
</span><span class="line">Vintage Collection Cuvée 500 2008 (Australia ~ Red ~ 59.95)
</span><span class="line">Rosé Sec VQA Cave Spring 2010 (Canada ~ Rosé ~ 14.95)
</span><span class="line">Vin de glace Cabernet 2013 (Canada ~ Red ~ 39.95)
</span><span class="line">Ice wine Vidal Inniskillin 2012 (Canada ~ Red ~ 49.95)
</span><span class="line">Cote de Sambre et Meusu Pinot Gris 2013 (France ~ White ~ 20.0)
</span><span class="line">Whispering Angel Rosé 2014 (France ~ Rosé ~ 20.0)
</span><span class="line">Pinot Grigio Rosé Folonari 2014 (Italy ~ Rosé ~ 11.9)
</span><span class="line">Amarone della Valpolicella Riserva Classico Sergio 2009 (Italy ~ Red ~ 50.0)
</span><span class="line">Marlborough Sauvignon Blanc 2014 (New Zealand ~ White ~ 23.0)
</span><span class="line">Mcgregor Shiraz 2009 (South Africa ~ Red ~ 14.0)
</span><span class="line">Conca del Riu Anoia Barcelona de Nit 2011 (Spain ~ White ~ 40.0)
</span><span class="line">Paragon Edna Valley Riesling 2012 (United States ~ White ~ 26.0)
</span><span class="line">Cabernet Sauvignon 2005 (United States ~ Red ~ 28.0)
</span><span class="line">The Prisoner 2013 (United States ~ Red ~ 51.0)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="deleting-rows">Deleting rows</h3>

<p>Deleting rows are simply done through a sequence of <code>filter</code> and <code>delete</code>. For example, if we decide not to sell Italian wines anymore, we could use: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">wines</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">country</span> <span class="o">===</span> <span class="s">&quot;Italy&quot;</span><span class="o">).</span><span class="n">delete</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Delete returns the number of deleted rows.</p>

<h3 id="transactions-and-rollback">Transactions and rollback</h3>

<p>When we run queries with <code>db.withSession</code>, each query runs independently. Hence, it is possible for some queries to faile while for some others to succeed. In many applications, we often want to combine queries within a transaction so that either all queries succeed or all fail. This is done simply by wrapping the queries within a <code>session.withTransaction</code> block inside <code>db.withSession</code>. For instance, we can perform a batch of price updates together as follows: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Select the prices between lo and hi</span>
</span><span class="line"><span class="k">def</span> <span class="n">discount</span><span class="o">(</span><span class="n">lo</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">hi</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span>
</span><span class="line">  <span class="n">wines</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">w</span> <span class="k">=&gt;</span> <span class="n">w</span><span class="o">.</span><span class="n">price</span> <span class="o">&gt;=</span> <span class="n">lo</span> <span class="o">&amp;&amp;</span> <span class="n">w</span><span class="o">.</span><span class="n">price</span> <span class="o">&gt;=</span> <span class="n">hi</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">price</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">db</span><span class="o">.</span><span class="n">withSession</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">session</span> <span class="k">=&gt;</span>
</span><span class="line">  <span class="n">session</span><span class="o">.</span><span class="n">withTransaction</span> <span class="o">{</span>
</span><span class="line">    <span class="n">discount</span><span class="o">(</span><span class="mf">20.0</span><span class="o">,</span> <span class="mf">30.0</span><span class="o">).</span><span class="n">update</span><span class="o">(</span><span class="mf">20.0</span><span class="o">)</span>
</span><span class="line">    <span class="n">discount</span><span class="o">(</span><span class="mf">30.0</span><span class="o">,</span> <span class="mi">35</span><span class="o">,</span><span class="mi">0</span><span class="o">).</span><span class="n">update</span><span class="o">(</span><span class="mf">30.0</span><span class="o">)</span>
</span><span class="line">    <span class="n">discount</span><span class="o">(</span><span class="mf">40.0</span><span class="o">,</span> <span class="mf">50.0</span><span class="o">).</span><span class="n">update</span><span class="o">(</span><span class="mf">50.0</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">wines</span><span class="o">.</span><span class="n">run</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The block passed to <code>withTransaction</code> is executed as a single transaction. If an exception is thrown, Slick rolls back the transaction at the end of the block. Note that Slick only rolls back the database operations. The remaining Scala code are executed and their effects are not rolled back.</p>

<h3 id="summary">Summary</h3>

<p>We are going to stop here for now. But, there are still a lot to cover about this cool library. To summarize, handling database access and queries is very smooth and effortless with Slick. Using a lifted embedding approach, we can define queries and run them later after we connect to the database. Slick database operations are very similar to Scala collection methods. We select rows and columns with <code>filter</code> and <code>map</code>. Then, we can order and limit our results with <code>sortBy</code>, <code>take</code> and <code>drop</code>. Updating, deleting and inserting rows are also a breeze. In addition, we can use for expression to write complex queries or compose simple ones. In my next post, I hope to explore more about Slick’s type system, other operations such as joins and aggregates as well as the new reactive streams support in Slick 3.0. I hope you could appreciate the functional aspects of database programming in Slick and use some of these in your applications. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Playground: Solving the Rush Hour Game in Haskell]]></title>
    <link href="http://giocode.github.io/blog/2014/10/16/functional-playground-solving-rush-hour-game-in-haskell/"/>
    <updated>2014-10-16T17:01:36-07:00</updated>
    <id>http://giocode.github.io/blog/2014/10/16/functional-playground-solving-rush-hour-game-in-haskell</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://giocode.github.io/images/rushhour.png" width="250" height="250" />
In this blog post, I will demonstrate the functional way of solving problems using the popular <a href="http://www.thinkfun.com/rushhour">Rush Hour</a> board game as an example. I will employ simple yet powerful language features that Haskell provides to produce expressive and modular programs, which are: </p>

<ul>
  <li>Types and abstractions</li>
  <li>Pattern matching and recursions</li>
  <li>Higher-order functions and combinators</li>
  <li>Function composition and currying</li>
</ul>

<h2 id="rush-hour-the-game">Rush Hour: the game</h2>

<p>The Rush Hour game consists of a traffic grid in which some cars and trucks are laid out. The goal is to find a path for the Red Car to exit by moving the other blocking vehicles out of its way. Created by Nob Yoshigahara in the 70’s, this game has kept people entertained and puzzled with its several levels of difficulty. </p>

<!-- more -->

<p>In Rush Hour, each vehicle can move only in either horizontally or vertically. At the start, the Red Car is placed horizontally on the 3rd line from the top. The other cars and trucks are blocking Red Car’s straight path to the Exit. </p>

<p>Now, let’s see how functional programming can be of help to solve the Rush Hour puzzle.</p>

<h2 id="game-abstraction">Game abstraction</h2>
<p>Thinking about the game, we can capture the locations and orientations of all vehicles at any instant as a state. Our objective is to find a state in which the Red Car is placed just in front of the Exit. Let’s call such state a <em>goal state</em>. To that, we transition from the initial state to a goal state through a sequence of moves. In each move, we move a car in a specific direction. The move is valid if the new location of the car does not land off the grid and does not overlap with another car. Ok, that’s enough English we can translate to Haskell. So let’s create some data types and type synonyms to abstract the cars, the states and the moves. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Orientation</span> <span class="ow">=</span> <span class="kt">H</span> <span class="o">|</span> <span class="kt">V</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>
</span><span class="line"><span class="kr">data</span> <span class="kt">Direction</span> <span class="ow">=</span> <span class="kt">L</span> <span class="o">|</span> <span class="kt">R</span> <span class="o">|</span> <span class="kt">U</span> <span class="o">|</span> <span class="kt">D</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class="line"><span class="kr">data</span> <span class="kt">Car</span> <span class="ow">=</span> <span class="kt">Car</span> <span class="p">{</span>
</span><span class="line">				<span class="n">x</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> 				<span class="c1">-- x-coordinate: from top-left corner of grid </span>
</span><span class="line">				<span class="n">y</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> 				<span class="c1">-- y-coordinate</span>
</span><span class="line">				<span class="n">o</span> <span class="ow">::</span> <span class="kt">Orientation</span><span class="p">,</span> 		<span class="c1">-- Vertical or Horizontal</span>
</span><span class="line">				<span class="n">sz</span> <span class="ow">::</span> <span class="kt">Int</span> 				<span class="c1">-- Car vs Truck</span>
</span><span class="line">			<span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>		
</span><span class="line"><span class="kr">type</span> <span class="kt">Line</span> <span class="ow">=</span> <span class="kt">String</span> 	
</span><span class="line"><span class="kr">type</span> <span class="kt">CarLetter</span> <span class="ow">=</span> <span class="kt">Char</span>					<span class="c1">-- Representation of vehicle </span>
</span><span class="line"><span class="kr">type</span> <span class="kt">State</span> <span class="ow">=</span> <span class="kt">Map</span> <span class="kt">CarLetter</span> <span class="kt">Car</span> 			<span class="c1">-- State of grid: Map with CarLetter/Car pairs</span>
</span><span class="line"><span class="kr">type</span> <span class="kt">Move</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">CarLetter</span><span class="p">,</span> <span class="kt">Direction</span><span class="p">)</span>	
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, let’s create some functions for moving cars. The first function <code>moveCar</code> takes a car and a direction to move and returns another car with the same orientation and size but at a new location. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">moveCar</span> <span class="ow">::</span> <span class="kt">Car</span> <span class="ow">-&gt;</span> <span class="kt">Direction</span> <span class="ow">-&gt;</span> <span class="kt">Car</span>
</span><span class="line"><span class="nf">moveCar</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xpos</span> <span class="n">ypos</span> <span class="kt">H</span> <span class="n">size</span><span class="p">)</span> <span class="kt">L</span> <span class="ow">=</span> <span class="kt">Car</span> <span class="p">(</span><span class="n">xpos</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">ypos</span> <span class="kt">H</span> <span class="n">size</span>
</span><span class="line"><span class="nf">moveCar</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xpos</span> <span class="n">ypos</span> <span class="kt">H</span> <span class="n">size</span><span class="p">)</span> <span class="kt">R</span> <span class="ow">=</span> <span class="kt">Car</span> <span class="p">(</span><span class="n">xpos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">ypos</span> <span class="kt">H</span> <span class="n">size</span>
</span><span class="line"><span class="nf">moveCar</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xpos</span> <span class="n">ypos</span> <span class="kt">V</span> <span class="n">size</span><span class="p">)</span> <span class="kt">U</span> <span class="ow">=</span> <span class="kt">Car</span> <span class="n">xpos</span> <span class="p">(</span><span class="n">ypos</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="kt">V</span> <span class="n">size</span>
</span><span class="line"><span class="nf">moveCar</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xpos</span> <span class="n">ypos</span> <span class="kt">V</span> <span class="n">size</span><span class="p">)</span> <span class="kt">D</span> <span class="ow">=</span> <span class="kt">Car</span> <span class="n">xpos</span> <span class="p">(</span><span class="n">ypos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="kt">V</span> <span class="n">size</span>
</span><span class="line"><span class="nf">moveCar</span> <span class="n">car</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">car</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The next function <code>move</code> takes a State and a Move then returns a new State. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">move</span> <span class="ow">::</span> <span class="kt">State</span> <span class="ow">-&gt;</span> <span class="kt">Move</span> <span class="ow">-&gt;</span> <span class="kt">State</span>
</span><span class="line"><span class="nf">move</span> <span class="n">state</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">dir</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Map</span><span class="o">.</span><span class="n">insert</span> <span class="n">key</span> <span class="n">newCar</span> <span class="n">state</span> <span class="kr">where</span>
</span><span class="line">	<span class="n">newCar</span> <span class="ow">::</span> <span class="kt">Car</span>
</span><span class="line">	<span class="n">newCar</span> <span class="ow">=</span> <span class="n">moveCar</span> <span class="p">(</span><span class="n">state</span> <span class="o">!</span> <span class="n">key</span><span class="p">)</span> <span class="n">dir</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In <code>move</code>, we assume that the Move is a valid one. To make sure we respect the rules of the game, we need two functions that tell us whether two cars are overlapping in the grid and whether a Car is off the grid.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">isOverlapping</span> <span class="ow">::</span> <span class="kt">Car</span> <span class="ow">-&gt;</span> <span class="kt">Car</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class="line"><span class="nf">isOverlapping</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">x</span> <span class="n">y</span> <span class="kt">H</span> <span class="n">sz</span><span class="p">)</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xnew</span> <span class="n">ynew</span> <span class="kt">H</span> <span class="n">sznew</span><span class="p">)</span>
</span><span class="line">	<span class="o">|</span> <span class="n">y</span> <span class="o">/=</span> <span class="n">ynew</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">ynew</span> <span class="o">&amp;&amp;</span> <span class="n">y</span><span class="o">+</span><span class="n">sz</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">ynew</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">ynew</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">ynew</span><span class="o">+</span><span class="n">sznew</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line"><span class="nf">isOverlapping</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">x</span> <span class="n">y</span> <span class="kt">V</span> <span class="n">sz</span><span class="p">)</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xnew</span> <span class="n">ynew</span> <span class="kt">V</span> <span class="n">sznew</span><span class="p">)</span>
</span><span class="line">	<span class="o">|</span> <span class="n">x</span> <span class="o">/=</span> <span class="n">xnew</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">xnew</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">+</span><span class="n">sz</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">xnew</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">xnew</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">xnew</span><span class="o">+</span><span class="n">sznew</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line"><span class="nf">isOverlapping</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">x</span> <span class="n">y</span> <span class="kt">H</span> <span class="n">sz</span><span class="p">)</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xnew</span> <span class="n">ynew</span> <span class="kt">V</span> <span class="n">sznew</span><span class="p">)</span>
</span><span class="line">	<span class="o">|</span> <span class="n">xnew</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">||</span> <span class="n">xnew</span> <span class="o">&gt;</span> <span class="n">x</span><span class="o">+</span><span class="n">sz</span><span class="o">-</span><span class="mi">1</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">ynew</span> <span class="o">&gt;</span> <span class="n">y</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">ynew</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">ynew</span><span class="o">+</span><span class="n">sznew</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line"><span class="nf">isOverlapping</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">x</span> <span class="n">y</span> <span class="kt">V</span> <span class="n">sz</span><span class="p">)</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">xnew</span> <span class="n">ynew</span> <span class="kt">H</span> <span class="n">sznew</span><span class="p">)</span>
</span><span class="line">	<span class="o">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">xnew</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">xnew</span><span class="o">+</span><span class="n">sznew</span><span class="o">-</span><span class="mi">1</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">ynew</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">ynew</span> <span class="o">&amp;&amp;</span> <span class="n">y</span><span class="o">+</span><span class="n">sz</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">ynew</span> <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">	<span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line">
</span><span class="line"><span class="nf">isOffgrid</span> <span class="ow">::</span> <span class="kt">Car</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class="line"><span class="nf">isOffgrid</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">x</span> <span class="n">y</span> <span class="kt">H</span> <span class="n">size</span><span class="p">)</span>
</span><span class="line">	<span class="o">|</span> <span class="n">x</span><span class="o">+</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">gridSize</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line">	<span class="o">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1</span>  <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line">	<span class="o">|</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">gridSize</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line"><span class="nf">isOffgrid</span> <span class="p">(</span><span class="kt">Car</span> <span class="n">x</span> <span class="n">y</span> <span class="kt">V</span> <span class="n">size</span><span class="p">)</span>
</span><span class="line">	<span class="o">|</span> <span class="n">y</span><span class="o">+</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">gridSize</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line">	<span class="o">|</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line">	<span class="o">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">gridSize</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class="line"><span class="nf">isOffgrid</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">False</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="state-space-search">State-Space search</h2>
<p>There are two ways to measure our ability to play the game. The first one is the number of moves that you make to exit the Red Car. The fewest moves you make, the more impressed your friends will be. The second one is the amount of time it takes to actually find the path to the exit. No matter how short the path you find, your friends will not be very impressed if you ask them to wait for hours. Since, we are going to cheat twice by using a computer and also Haskell, we will not be as much concerned about the amount of time to find a path. Instead, we will focus on finding the shortest path. So how are we going to tell Haskell to do that for us? </p>

<p>The mechanism to solve Rush Hour and other similar puzzles is <a href="http://en.wikipedia.org/wiki/State_space_search">State Space search</a>. At any instant of the game, we can actually imagine ourselves lost in an “invisible” directed graph where each node is a State and each edge is a Move. Two States <code>fromState</code> and <code>toState</code> are linked by a Move <code>move</code> whenever we can legally move a car in <code>fromState</code> and obtain the new state <code>toState</code>. Since we are interested to find the shortest path to exit, we’ll use a depth-first approach. </p>

<p>Beginning with the end in mind, let’s declare the function <code>statesearch</code>. It takes the following three inputs: </p>

<ol>
  <li>An initial State</li>
  <li>A list of States that have already been explored</li>
  <li>A list of Paths to be explored</li>
</ol>

<p>Then, <code>statesearch</code> returns a Path to the exit as output. A path is simply a tuple composed of the current state and a list of moves that led to that state from the initial one. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">type</span> <span class="kt">Path</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">State</span><span class="p">,</span> <span class="p">[</span><span class="kt">Move</span><span class="p">])</span>				
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For clarity, let’s give some meaningul names to the types of the last two inputs of <code>statesearch</code> as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">type</span> <span class="kt">ExploredStates</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">State</span><span class="p">]</span>			
</span><span class="line"><span class="kr">type</span> <span class="kt">UnexploredPaths</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">Path</span><span class="p">]</span> 			
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In our state-space search, we also need a function <code>solved</code> that checks  if for a given state we have reached our goal. We assume that the key for the Red Car is the character <code>'X'</code>. So here, we just check if it is already in front of the exit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">gridSize</span> <span class="ow">=</span> <span class="mi">6</span>
</span><span class="line"><span class="nf">solved</span> <span class="ow">::</span> <span class="kt">State</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class="line"><span class="nf">solved</span> <span class="n">state</span> <span class="ow">=</span> <span class="p">(</span><span class="n">x</span> <span class="n">xcar</span> <span class="o">+</span> <span class="n">sz</span> <span class="n">xcar</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">gridSize</span><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">	<span class="n">xcar</span> <span class="ow">=</span> <span class="n">state</span> <span class="o">!</span> <span class="n">&#39;X&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another helper function that will be useful in the state-space is <code>generateNewMoves</code>, which produces a list of possible move for each car in a given state and then concatenates all possible moves. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">generateNewMoves</span> <span class="ow">::</span> <span class="kt">State</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Move</span><span class="p">]</span>
</span><span class="line"><span class="nf">generateNewMoves</span> <span class="n">state</span> <span class="ow">=</span> <span class="n">concat</span> <span class="o">$</span> <span class="n">map</span> <span class="n">generateNew</span> <span class="p">(</span><span class="kt">Map</span><span class="o">.</span><span class="n">keys</span> <span class="n">state</span><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">	<span class="n">generateNew</span> <span class="ow">::</span> <span class="kt">CarLetter</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Move</span><span class="p">]</span>
</span><span class="line">	<span class="n">generateNew</span> <span class="n">key</span>
</span><span class="line">		<span class="o">|</span> <span class="n">o</span> <span class="p">(</span><span class="n">state</span> <span class="o">!</span> <span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="kt">H</span> 	<span class="ow">=</span> <span class="p">[(</span><span class="n">key</span><span class="p">,</span> <span class="kt">L</span><span class="p">),</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="kt">R</span><span class="p">)]</span>
</span><span class="line">		<span class="o">|</span> <span class="n">otherwise</span> 			<span class="ow">=</span> <span class="p">[(</span><span class="n">key</span><span class="p">,</span> <span class="kt">U</span><span class="p">),</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="kt">D</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The generated moves do not have to be valid yet. We just make sure to generate moves that correspond to the orientation of each moved car. In other words, a horizontally oriented car cannot be moved up or down and vice versa. However, we will still need later to filter the valid moves. </p>

<h3 id="our-depth-first-state-space-search">Our depth-first state-space search</h3>
<p>Now, let’s present the state-space search with depth-first traversal strategy: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">statesearch</span> <span class="ow">::</span> <span class="kt">ExploredStates</span> <span class="ow">-&gt;</span> <span class="kt">UnexploredPaths</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Path</span>
</span><span class="line"><span class="nf">statesearch</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class="line"><span class="nf">statesearch</span> <span class="n">explored</span> <span class="p">(</span><span class="n">p</span><span class="o">@</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">mvs</span><span class="p">)</span> <span class="kt">:</span> <span class="n">paths</span><span class="p">)</span>
</span><span class="line">	<span class="o">|</span> <span class="n">solved</span> <span class="n">state</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="n">p</span>
</span><span class="line">	<span class="o">|</span> <span class="n">state</span> <span class="p">`</span><span class="n">elem</span><span class="p">`</span> <span class="n">explored</span> <span class="ow">=</span> <span class="n">statesearch</span> <span class="n">explored</span> <span class="n">paths</span>
</span><span class="line">	<span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">statesearch</span>
</span><span class="line">					<span class="p">(</span><span class="n">state</span><span class="kt">:</span><span class="n">explored</span><span class="p">)</span>
</span><span class="line">					<span class="p">(</span><span class="n">paths</span> <span class="o">++</span> <span class="n">nextPaths</span><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">						<span class="n">nextPaths</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Path</span><span class="p">]</span>
</span><span class="line">						<span class="n">nextPaths</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">move</span> <span class="n">state</span> <span class="n">m</span><span class="p">,</span> <span class="n">mvs</span> <span class="o">++</span> <span class="p">[</span><span class="n">m</span><span class="p">])</span> <span class="o">|</span> <span class="n">m</span> <span class="ow">&lt;-</span> <span class="n">generateNewMoves</span> <span class="n">state</span><span class="p">,</span> <span class="n">isValid</span> <span class="n">state</span> <span class="n">m</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To find a solution form a state <code>start</code>, we call the above function as follows: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">solve</span> <span class="ow">::</span> <span class="kt">State</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Path</span>
</span><span class="line"><span class="nf">solve</span> <span class="n">start</span> <span class="ow">=</span> <span class="n">statesearch</span> <span class="kt">[]</span> <span class="p">[(</span><span class="n">start</span><span class="p">,</span><span class="kt">[]</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In <code>solve</code>, we initialize the list of unexplored paths to <code>[(start,[])</code>. On the other hand, the list of explored states is initially empty. </p>

<p><code>statesearch</code> is implemented using pattern matching and recursion. The first thing it does is looking at the list of unexplored paths. If there is no more path to explore, the function returns <code>Nothing</code> which means there is no solution to the puzzle. Otherwise, we continue the search by evaluating the next path named <code>p@(state, mvs)</code> which is the head of the unexplored paths using the pattern matching: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">statesearch</span> <span class="n">explored</span> <span class="p">(</span><span class="n">p</span><span class="o">@</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">mvs</span><span class="p">)</span> <span class="kt">:</span> <span class="n">paths</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the final <code>state</code> in the currently evaluated path is a <em>goal state</em>, then the function declares success by returning just that path <code>p</code>. </p>

<p>Next, let’s look at what happens if we have not yet reached our goal. <code>statesearch</code> then checks whether the current <code>state</code> has already been explored before. In that case, the path or list of moves that led us to <code>state</code> is no good. So, we simply discard that path and move on to the next one otherwise we will fall into a cycle. This is done through the recursive call <code>statesearch explored paths</code>. </p>

<p>Now, suppose that the current <code>state</code> is not a <code>goal state</code> and it has not yet been explored. Then, we continue our search by generating some valid moves. For each valid move <code>m</code>, we produce an updated state <code>move state m</code> and an updated list of moves <code>mvs ++ [m]</code> and combine these into the current path <code>p</code>. We do that for each valid move and then we concatenate the generated paths to the list of path to be explored. Note that because we adopt a breadth-first search, we must append these paths at the end of the list. If we did otherwise, it is very unlikely that we would have found the shortest path to the exit. 
After evaluating the previous state, we add it to the list of explored states and make the recursive call: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">statesearch</span> <span class="p">(</span><span class="n">state</span><span class="kt">:</span><span class="n">explored</span><span class="p">)</span> <span class="p">(</span><span class="n">paths</span> <span class="o">++</span> <span class="n">nextPaths</span><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">	<span class="n">nextPaths</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Path</span><span class="p">]</span>
</span><span class="line">	<span class="n">nextPaths</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">move</span> <span class="n">state</span> <span class="n">m</span><span class="p">,</span> <span class="n">mvs</span> <span class="o">++</span> <span class="p">[</span><span class="n">m</span><span class="p">])</span> <span class="o">|</span> <span class="n">m</span> <span class="ow">&lt;-</span> <span class="n">generateNewMoves</span> <span class="n">state</span><span class="p">,</span> <span class="n">isValid</span> <span class="n">state</span> <span class="n">m</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>So that’s how elegant a state-space search can be implemented in Haskell. <code>statesearch</code> is the core function to solve the puzzle. The rest is a representation of the problem and helper functions.</p>

<h2 id="time-to-play">Time to play</h2>
<p>Well, before we can show some descent user-interface to this puzzle. We’ll need helpers functions that converts a string representation of the grid to a State and vice versa. So, we define the following functions: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">type</span> <span class="kt">Line</span> <span class="ow">=</span> <span class="kt">String</span>
</span><span class="line"><span class="nf">stateToLines</span> <span class="ow">::</span> <span class="kt">State</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Line</span><span class="p">]</span>
</span><span class="line"><span class="nf">linesToState</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Line</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">State</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s illustrate how these would work with an example without showing their implementations. Suppose our initial state prints like this: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-A----
</span><span class="line">-A---D
</span><span class="line">XXXC-D
</span><span class="line">---C-D
</span><span class="line">-BBB--
</span><span class="line">------</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, the function <code>linesToState</code> would return the following State when applied to the above <code>[Line]</code> representation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kt">Map</span><span class="o">.</span><span class="n">fromList</span> <span class="p">[(</span><span class="n">&#39;A&#39;</span><span class="p">,</span><span class="kt">Car</span> <span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">o</span> <span class="ow">=</span> <span class="kt">V</span><span class="p">,</span> <span class="n">sz</span> <span class="ow">=</span> <span class="mi">2</span><span class="p">}),</span>
</span><span class="line">				<span class="p">(</span><span class="n">&#39;B&#39;</span><span class="p">,</span><span class="kt">Car</span> <span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">o</span> <span class="ow">=</span> <span class="kt">H</span><span class="p">,</span> <span class="n">sz</span> <span class="ow">=</span> <span class="mi">3</span><span class="p">}),</span>
</span><span class="line">				<span class="p">(</span><span class="n">&#39;C&#39;</span><span class="p">,</span><span class="kt">Car</span> <span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">o</span> <span class="ow">=</span> <span class="kt">V</span><span class="p">,</span> <span class="n">sz</span> <span class="ow">=</span> <span class="mi">2</span><span class="p">}),</span>
</span><span class="line">				<span class="p">(</span><span class="n">&#39;D&#39;</span><span class="p">,</span><span class="kt">Car</span> <span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">o</span> <span class="ow">=</span> <span class="kt">V</span><span class="p">,</span> <span class="n">sz</span> <span class="ow">=</span> <span class="mi">3</span><span class="p">}),</span>
</span><span class="line">				<span class="p">(</span><span class="n">&#39;X&#39;</span><span class="p">,</span><span class="kt">Car</span> <span class="p">{</span><span class="n">x</span> <span class="ow">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">o</span> <span class="ow">=</span> <span class="kt">H</span><span class="p">,</span> <span class="n">sz</span> <span class="ow">=</span> <span class="mi">3</span><span class="p">})]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Solving this <em>beginner level</em> puzzle with Haskell and your supercomputer would be a real overkill. But for the sake of fun, here is the output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-A----
</span><span class="line">-A---D
</span><span class="line">XXXC-D
</span><span class="line">---C-D
</span><span class="line">-BBB--
</span><span class="line">------
</span><span class="line">
</span><span class="line">-A----
</span><span class="line">-A---D
</span><span class="line">XXXC-D
</span><span class="line">---C-D
</span><span class="line">BBB---
</span><span class="line">------
</span><span class="line">
</span><span class="line">-A----
</span><span class="line">-A---D
</span><span class="line">XXX--D
</span><span class="line">---C-D
</span><span class="line">BBBC--
</span><span class="line">------
</span><span class="line">
</span><span class="line">-A----
</span><span class="line">-A----
</span><span class="line">XXX--D
</span><span class="line">---C-D
</span><span class="line">BBBC-D
</span><span class="line">------
</span><span class="line">
</span><span class="line">-A----
</span><span class="line">-A----
</span><span class="line">XXX---
</span><span class="line">---C-D
</span><span class="line">BBBC-D
</span><span class="line">-----D
</span><span class="line">
</span><span class="line">-A----
</span><span class="line">-A----
</span><span class="line">-XXX--
</span><span class="line">---C-D
</span><span class="line">BBBC-D
</span><span class="line">-----D
</span><span class="line">
</span><span class="line">-A----
</span><span class="line">-A----
</span><span class="line">--XXX-
</span><span class="line">---C-D
</span><span class="line">BBBC-D
</span><span class="line">-----D
</span><span class="line">
</span><span class="line">-A----
</span><span class="line">-A----
</span><span class="line">---XXX
</span><span class="line">---C-D
</span><span class="line">BBBC-D
</span><span class="line">-----D</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Yay! Now, try it with a super tough challenge.</p>

<!--  -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Flavors: A Tasting Tour Part 1]]></title>
    <link href="http://giocode.github.io/blog/2014/10/15/scala-flavors-a-tasting-tour/"/>
    <updated>2014-10-15T17:50:32-07:00</updated>
    <id>http://giocode.github.io/blog/2014/10/15/scala-flavors-a-tasting-tour</id>
    <content type="html"><![CDATA[<p>This a is the first part on a series of tutorials on Scala’s language features. This series are written for anyone who are new to Scala, knows its syntax a bit but are excited and scared at the same type by the bipolarity of this <code>beautiful</code> language. In this first part, we will cover two points: <img class="left" src="../images/scalabovolo.png" width="200" height="300" /></p>

<ul>
  <li>Scala’s type system</li>
  <li>Scala’s purely object-oriented language features</li>
</ul>

<h2 id="starting-strong-and-safe">Starting strong and safe</h2>

<p>Scala’s type system is strong, static and safe. What does that mean? </p>

<h3 id="values-variables-and-types">Values, variables and Types</h3>

<p>There are two possible ways to associate a name to a value or an expression. The first one is <code>val</code>, which is used to permanently bind a value to an indentifier. Once a val is set, its value can no longer be reassigned. In other words, vals are like constants. </p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">y</span> <span class="k">=</span> <span class="mf">5.0</span>
</span><span class="line"><span class="n">y</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">5.0</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">message</span> <span class="k">=</span> <span class="s">&quot;Holla scala&quot;</span>
</span><span class="line"><span class="n">message</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="nc">Holla</span> <span class="n">scala</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Changing the content of <code>message</code> to <em>“Bye scala”</em> is not possible. Instead, it will generate a compilation error because of a reassignment to a val.</p>

<p>The second one is <code>var</code>. You use a var for variables. Unlike vals, the value that a <code>var</code> refers to can be changed or reassigned in the future. For example, the <code>numberOfRabbits</code> enrolled to your farming program will probably keep growing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">var</span> <span class="n">numberOfRabbits</span> <span class="k">=</span> <span class="mi">6</span>
</span><span class="line"><span class="n">numberOfRabbits</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">numberOfRabbits</span> <span class="k">=</span> <span class="n">numberOfRabbits</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class="line"><span class="n">numberOfRabbits</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">40</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">numberOfRabbits</span> <span class="k">=</span> <span class="n">numberOfRabbits</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class="line"><span class="n">numberOfRabbits</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">160</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once a var is declared, its type however cannot be modified. In other words, numberOfRabbits can only contain an integer. Reassigning a string to it will not compile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">numberOfRabbits</span> <span class="k">=</span> <span class="s">&quot;will not compile&quot;</span>
</span><span class="line"><span class="c1">// Expression of type String doesn&#39;t comform to expected type Int.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We have not yet explained what these types are about. Since Scala is a statically typed language, any values and variables are initialized with their type and content. Looking at the REPL outputs above, we did not declare any type when defining <code>y</code>, <code>message</code> or <code>numberOfRabbits</code>. So how did Scala know? Well, Scala is smart enough to infer the type from the right hand side of the assignment. Scala understood that “Holla scala” is definitely a string whereas the decimal 5.0 looks like a Double.</p>

<p>In principle, a formal way to define vals and vars is like this. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// The right side must return a value of the declared type.</span>
</span><span class="line"><span class="k">val</span> <span class="n">identifier</span><span class="k">:</span> <span class="k">type</span> <span class="o">=</span> <span class="n">expression</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In some situations, we want to declare vals and vars without giving them an initial value. In that case, the type declaration is mandatory. Otherwise, the rule of thumb is to omit the types when they can be readily inferred with a glimpse and to declare them to add clarity to your code. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">;</span>  <span class="c1">// Scala follows you</span>
</span><span class="line"><span class="k">val</span> <span class="n">w</span><span class="o">;</span> 			<span class="c1">// Scala will cry out loud</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You must be still asking yourself why we need vals when we can use vars. Be patient as we will come back to this question when we will later discuss the choice between mutable and immutable data. For now, let’s get our feet wet by reviewing some basic types and operators. </p>

<h3 id="basic-scala-types-and-operators">Basic Scala types and operators</h3>
<p>There are 3 types of operators: </p>

<ul>
  <li>binary operators which take two operands on their left and right sides </li>
  <li>unary prefix operators which are applied to one operand on its right</li>
  <li>unary postix operators which have one operand on its left </li>
</ul>

<p>Here are some examples of binary and unary operators for the basic numeric types. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Binary operators</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">20</span> <span class="o">*</span> <span class="mf">1.20</span>
</span><span class="line"><span class="nc">Double</span> <span class="k">=</span> <span class="mf">24.0</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line"><span class="nc">Int</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">larger</span> <span class="k">=</span> <span class="mi">3</span> <span class="n">max</span> <span class="mi">7</span>
</span><span class="line"><span class="n">larger</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">remainder</span> <span class="k">=</span> <span class="mi">11</span> <span class="o">%</span> <span class="mi">3</span>
</span><span class="line"><span class="n">remainder</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="c1">// A unary prefix operator</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">decimalNumber</span> <span class="k">=</span> <span class="o">-</span> <span class="mf">102.876</span>
</span><span class="line"><span class="nc">Double</span> <span class="k">=</span> <span class="o">-</span> <span class="mf">102.876</span>
</span><span class="line">
</span><span class="line"><span class="c1">// A unary postfix operator</span>
</span><span class="line"><span class="n">decimalNumber</span> <span class="n">toInt</span>
</span><span class="line"><span class="nc">Int</span> <span class="k">=</span> <span class="o">-</span> <span class="mi">102</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Similarly, logical operators on Boolean values can be either unary or binary.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">veracity</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class="line"><span class="n">veracity</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">var</span> <span class="n">lie</span> <span class="k">=</span> <span class="o">!</span> <span class="n">veracity</span>	 <span class="c1">// a prefix operator</span>
</span><span class="line"><span class="n">lie</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">veracity</span> <span class="o">&amp;&amp;</span> <span class="n">lie</span>
</span><span class="line"><span class="nc">Boolean</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">halftruth</span> <span class="k">=</span> <span class="n">veracity</span> <span class="o">||</span> <span class="n">lie</span>
</span><span class="line"><span class="n">halftruth</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the following, let’s shed some lights on the real nature of values, types and operators in Scala. Ready? Unveil! </p>

<h2 id="objects-orient-scalas-type-system">Objects orient Scala’s type system</h2>
<p>Behind the curtain, Scala is a purely object-oriented programming language. In fact, every value is an object of some type. Each type is represented by a class which serves as a blueprint for all values of that type. Moreover, every operation in Scala is a method call on some object.</p>

<blockquote><p>Types are classes. Values are objects. Operations are method calls.</p></blockquote>

<p>Primitive types such as String and Double are wrapper classes for Java’s primitive types. Let’s look at some string concatenation examples to understand this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">//String concatenations </span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;apples&quot;</span> <span class="o">+</span> <span class="s">&quot; oranges&quot;</span>
</span><span class="line"><span class="nc">String</span> <span class="k">=</span>  <span class="n">apples</span> <span class="n">oranges</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">o</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class="line"><span class="nc">String</span> <span class="k">=</span>  <span class="n">oranges</span>  <span class="n">oranges</span>  <span class="n">oranges</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">3</span> <span class="o">+</span> <span class="s">&quot; oranges&quot;</span>
</span><span class="line"><span class="mi">3</span> <span class="n">oranges</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If Scala was not awesome, we would have to rewrite the above concatenations as formal method calls:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// More verbose concatenations</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;apples&quot;</span><span class="o">.+(</span><span class="s">&quot; oranges&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;oranges&quot;</span><span class="o">.*(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mf">3.</span><span class="o">+(</span><span class="s">&quot; oranges&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Luckily, any methods with single parameters can be written in Scala as if they were built-in infix operators. Therefore, we can omit the <code>.</code> notation and the parentheses enclosing the single parameter. Instead, we add a space before and after the method name. The cool thing about that is the flexibility to name your binary operations in any way you want as long as the name is a valid identifier. </p>

<h3 id="method-overloading">Method overloading</h3>

<p>Since Scala is object-oriented, it supports method overloading so that different methods with the same name can be defined provided their signatures are different. </p>

<p>Looking at <code>"apples".+(" oranges")</code>, we see that the concatenation is performed by calling the method <code>+</code> defined on the String object <em>“apples”</em> with the string parameter <em>” oranges”</em>. What gets return is the new String object <em>“apples oranges”</em>. Furthermore, many other signatures exist for the same operator <code>+</code>. 
When it comes to <code>"oranges".*(3)</code>, <code>*</code> is another method defined on String and it returns the <em>“oranges”</em> string concatenated 3 times. If you look at the Scala documentation for StringOps, you will find the signature of this method to be <code>def *(n: Int): String</code>. </p>

<p>Of course, Scala will complain if you call a method on one object and the method signature is not present in the class definition. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="s">&quot;apples&quot;</span> <span class="o">*</span> <span class="mf">3.0</span>
</span><span class="line"><span class="n">error</span><span class="k">:</span> <span class="kt">def</span> <span class="kt">*</span><span class="o">(</span><span class="kt">x:</span> <span class="kt">Double</span><span class="o">)</span><span class="kt">:</span> <span class="kt">String</span> <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">resolved</span> <span class="kt">on</span> <span class="kt">String</span> <span class="kt">object</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">3</span> <span class="o">*</span> <span class="s">&quot;oranges&quot;</span>
</span><span class="line"><span class="n">error</span><span class="k">:</span> <span class="kt">def</span> <span class="kt">*</span><span class="o">(</span><span class="kt">s:</span> <span class="kt">String</span><span class="o">)</span><span class="kt">:</span> <span class="kt">String</span> <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">resolved</span> <span class="kt">on</span> <span class="kt">Int</span> <span class="kt">object</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The only exception to this rule is if an <em>implicit conversion</em> is defined for the corresponding type, then the method call can be forwarded to the converted type. But let’s keep things simple for now and perhaps, we’ll discuss about implicits later on.</p>

<h3 id="create-abstract-data-types-with-classes">Create Abstract Data Types with Classes</h3>
<p>It is time to create your own types. Classes are used to abstract and parameterize data types that serve as building blocks for your Scala program. </p>

<p><strong>Class definition:</strong> you define a class using the <code>class</code> keyword followed by the class name and class parameters. Optionally, you can add statements and expressions in the class body delimited by a <code>{}</code> block to do one of the following: </p>

<ul>
  <li>declare and initialize value and variable fields  </li>
  <li>define public methods</li>
  <li>define private methods helper or nested classes</li>
  <li>execute some code, e.g. I/O actions</li>
</ul>

<p>Let’s look at a culinary example in which we first define a <em>Recipe</em> class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Recipe</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">s</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">instructions</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Nil</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// some val and var fiels declarations and initializations</span>
</span><span class="line">  <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="n">n</span>
</span><span class="line">  <span class="k">val</span> <span class="n">serves</span> <span class="k">=</span> <span class="n">s</span>
</span><span class="line">
</span><span class="line">  <span class="k">var</span> <span class="n">description</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">  <span class="k">var</span> <span class="n">ingredients</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="o">(</span><span class="kt">Double</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span> <span class="k">_</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Class constructor</strong> asks you to specify the parameters <code>s</code>, <code>n</code>, and <code>instructions</code> to create the <code>Recipe</code> objects. For example, you call the constructor method and pass the name, the number of serves and instruction list. As a result, you get a new <em>easyNoodleRecipe</em> object. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">var</span> <span class="n">easyNoodleRecipe</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Recipe</span><span class="o">(</span><span class="s">&quot;Hot Instant Noodle&quot;</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;Boil water&quot;</span><span class="o">,</span> <span class="s">&quot;Cook noodle&quot;</span><span class="o">,</span> <span class="s">&quot;Serve&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Scala also allows us to define default values for some of these parameters so that when we create <em>Recipe</em> objects that have these default values, we no longer need to specify the corresponding parameters when calling the constructor. Behind the scene, Scala simply generates additional constructors during compilation to support this.
For example, we specified a default value of 1 for <code>s</code> and a default empty list for <code>instructions</code> in the class definition. Therefore, we can create an <em>healthySaladRecipe</em> that serves 1 by passing only the other two parameters. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">healthySaladRecipe</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Recipe</span><span class="o">(</span><span class="s">&quot;Healthy green salad&quot;</span><span class="o">,</span> <span class="n">instructions</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;Put greens in a bowl&quot;</span><span class="o">,</span> <span class="s">&quot;Add dressing&quot;</span><span class="o">,</span> <span class="s">&quot;Mix&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Similarly, we can create a <em>lazyBurgerRecipe</em> that serves one and has an empty instruction by passing only one parameter, its name.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">var</span> <span class="n">lazyBurgerRecipe</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Recipe</span><span class="o">(</span><span class="s">&quot;Big Mac Burger&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Class parameters vs. Class fields:</strong> there is an important difference about the scope of class parameters and var/val fields. Class parameters are not publicly visible unless they are defined with the keyword <code>var</code> or <code>val</code>. In such cases, a getter and/or a setter is generated correspondingly. In contrast, a class field is always defined with one of these keywords. Thus, Scala makes them accessible publicly. Here are some simple rules about the accessibility and visibility of class parameters and fields:</p>

<ol>
  <li><strong>Class parameters defined <em>without var/val</em> keyword:</strong> can only be read within the class body definition. </li>
  <li><strong>Class parameters defined <em>with val</em>:</strong> a getter is created and the parameter <em>can be read</em> by a user of the class, by the object itself or by another instance of the same class. </li>
  <li><strong>Class parameters defined <em>with var</em>:</strong> a getter and a setter are generated so the parameter <em>can be read and also reassigned</em> by a user of the class, by the object itself or by another instance of the same class.</li>
</ol>

<p><strong>Methods vs Functions</strong> 
In Scala, methods and functions are defined in the same way using the syntax: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">methodName</span><span class="o">(</span><span class="n">parameter1</span><span class="k">:</span> <span class="kt">Type1</span><span class="o">,</span> <span class="nc">Parameter2</span><span class="k">:</span> <span class="kt">Type2</span><span class="o">,</span> <span class="o">...)</span><span class="k">:</span> <span class="kt">OutputType</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line">	<span class="n">result_expression</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The difference between methods and functions in Scala is similar to that of instance methods and static methods in Java. In Scala, methods are invoked on an object instance with some parameters and are defined inside the class constructor. On the other hand, functions are not invoked on any object; they are simply called with some inputs and return an output. Furthermore, there are two ways to define functions in Scala. First, functions are usually defined inside a singleton object module. If that object is a companion of a class with the same name, then we can make the analogy with static methods in Java. Second, functions can alternatively be defined on the go using functions literals and assigned to a <code>val</code>. </p>

<p>As previously mentionned, when a method is invoked in Scala with a single parameter, it can be interpreted as a binary operation. In fact, we can ommit the dot notation in that case when calling the method and replacing it with spaces between the object, the method name and the parameters. On the other hand, a parameterless method is usually written with a dot notation as if we access a field of the object on which we invoke the method. This programming style is known as <em>universal access principle</em>. </p>

<p>Let’s define some examples by defining two methods in the class Recipe’s constructor. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Recipe</span><span class="o">(</span><span class="k">val</span> <span class="n">n</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="k">val</span> <span class="n">s</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">instructions</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Nil</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  <span class="k">var</span> <span class="n">description</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">  <span class="k">var</span> <span class="n">ingredients</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="o">(</span><span class="kt">Double</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span> <span class="k">_</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// New methods </span>
</span><span class="line">  <span class="k">def</span> <span class="n">hasNuts</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">ingredients</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">toList</span> <span class="n">contains</span> <span class="s">&quot;nuts&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">serve</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="o">(</span><span class="kt">Double</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span> <span class="k">this</span><span class="o">.</span><span class="n">ingredients</span> <span class="n">mapValues</span> <span class="o">(</span><span class="n">v</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="n">_1</span> <span class="o">*</span> <span class="n">p</span><span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, we can test this in the Scala shell. Let’s go back to our <code>healthySaladRecipe</code> and add its ingredients.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">healthySaladRecipe</span><span class="o">.</span><span class="n">ingredients</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;Tomatoes&quot;</span><span class="o">,</span><span class="s">&quot;Cucumber&quot;</span><span class="o">,</span><span class="s">&quot;Dressing&quot;</span><span class="o">,</span><span class="s">&quot;Feta cheese&quot;</span><span class="o">)</span> <span class="n">zip</span> <span class="nc">List</span><span class="o">((</span><span class="mf">1.0</span><span class="o">,</span><span class="s">&quot;unit&quot;</span><span class="o">),</span> <span class="o">(</span><span class="mf">1.0</span><span class="o">,</span><span class="s">&quot;unit&quot;</span><span class="o">),</span> <span class="o">(</span><span class="mf">1.0</span><span class="o">,</span><span class="s">&quot;unit&quot;</span><span class="o">),(</span><span class="mf">50.0</span><span class="o">,</span><span class="s">&quot;grams&quot;</span><span class="o">))</span> <span class="n">toMap</span>
</span><span class="line"><span class="n">healthySaladRecipe</span><span class="o">.</span><span class="n">ingredients</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>,<span class="o">(</span><span class="kt">Double</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="nc">Tomatoes</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">1.0</span><span class="o">,</span><span class="n">unit</span><span class="o">),</span> <span class="nc">Cucumber</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">1.0</span><span class="o">,</span><span class="n">unit</span><span class="o">),</span> <span class="nc">Dressing</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">1.0</span><span class="o">,</span><span class="n">unit</span><span class="o">),</span> <span class="nc">Feta</span> <span class="n">cheese</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">50.0</span><span class="o">,</span><span class="n">grams</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Remember that <code>healthySaladRecipe</code> was defined as a <code>val</code>. However, it had fields defined as <code>var</code> such as ingredients. That means that <code>healthySaladRecipe</code> has a mutable state. This is a key distinction that is important in Scala. Even though an object is bound to a val. It can still changes state even the class of that object has mutable state. Mutable state is definitely to be avoided if we follow the functional programming principles. Here, we simply use this as an example to show that there is a key difference between <code>var</code> vs. <code>var</code> and <code>mutability</code> vs. <code>immutability</code>. In the second part of this tutorial, we will get into more details on this matter. </p>

<blockquote>
  <p>A <code>val</code> that is bound to an object cannot be reassigned to another object. But that does not imply that the object does not have a mutable state! </p>
</blockquote>

<p>In the above code, we created a map of ingredients from a list of ingredients and a list of quantity. To do that, we invoked the method <code>zip</code> which is defined in <code>scala.collection.immutable.List</code> on the first list and passed the second list as parameter. This is an example of method invocation as binary operator in Scala. Then, we used a parameterless method <code>toMap</code> which is invoked on a list of pairs to create a Map. </p>

<p>By default, any Recipe object will serve one person. Let’s check this in the shell.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">healthySaladRecipe</span><span class="o">.</span><span class="n">serves</span>
</span><span class="line"><span class="n">res</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So now, what if you invite two of your friends for lunch and you make a healthy salad for the three of you. Well, you can now invoke the <code>serve</code> method that we previously defined for that. What you will obtain is a new list of ingredients with the right quantity for each ingredient. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="n">healthySaladRecipe</span><span class="o">.</span><span class="n">serve</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="n">res</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>,<span class="o">(</span><span class="kt">Double</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="nc">Tomatoes</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">3.0</span><span class="o">,</span><span class="n">unit</span><span class="o">),</span> <span class="nc">Cucumber</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">3.0</span><span class="o">,</span><span class="n">unit</span><span class="o">),</span> <span class="nc">Dressing</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">3.0</span><span class="o">,</span><span class="n">unit</span><span class="o">),</span> <span class="nc">Feta</span> <span class="n">cheese</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mf">150.0</span><span class="o">,</span><span class="n">grams</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s look closely at the implementation of the <code>serve</code> method. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">serve</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="o">(</span><span class="kt">Double</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span> <span class="k">this</span><span class="o">.</span><span class="n">ingredients</span> <span class="n">mapValues</span> <span class="o">(</span><span class="n">v</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="n">_1</span> <span class="o">*</span> <span class="n">p</span><span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We accessed the list of ingredients of <code>healthySaladRecipe</code> and invoked a method <code>mapValues</code> which is defined in <code>scala.collection.immutable.Map</code>. This method takes a function value as parameter and applies that function to each value of the element in the map ingredients. Above, we used a function literal, also called anonymous or lambda function, using scala’s syntax: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">v</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="n">_1</span> <span class="o">*</span> <span class="n">p</span><span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This function literal takes as input <code>v</code>, which has a type of a two-element tuple <code>(Double, String)</code>. Then, it returns of a value of the same type but with the ingredient quantity scaled by the number of serving <code>p</code>. We did not to specify the type signature of the function since Scala could infer to type of <code>v</code> from the type of <code>this.ingredients</code>.</p>

<p>We have reached the end of the Part 1 of this tour on “Scala flavors”. In Part 2, we will revisit some Scala object-oriented features including <em>case classes</em> and <em>companion objects</em>. We’ll also get a taste of <em>first-class functions</em> in Scala. Finally, we’ll touch on immutability vs. mutability in Scala.</p>

]]></content>
  </entry>
  
</feed>
